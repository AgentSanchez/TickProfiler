buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

configurations {
    bundledLibs
    compile {
        extendsFrom bundledLibs
    }
}

dependencies {
//    compile 'com.github.stephenc.high-scale-lib:high-scale-lib:1.1.4'
    bundledLibs 'org.codehaus.jackson:jackson-core-lgpl:1.9.13'
    bundledLibs 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13'
    compile 'org.projectlombok:lombok:1.16.6'
}

ext.mcVersion = "1.8.8"
ext.forgeVersion = "11.15.0.1655"
ext.forgeMappings = "snapshot_20151122"
group = "nallar.tickprofiler" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TickProfiler"

def calculateVersion() {
    def ver = project.mcVersion
    if (System.env.BUILD_NUMBER != null)
        return ver + ".jenkins." + System.env.BUILD_NUMBER
    if (project.hasProperty("release"))
        return ver + '.' + project.release
    return ver + ".dev"
}


version = calculateVersion()

minecraft {
    version = "${project.mcVersion}-${project.forgeVersion}"
    runDir = "run"
    mappings = project.forgeMappings
}

compileJava {
    // Kills the warnings about using the sun.* classes
    options.compilerArgs << '-XDignore.symbol.file'
    // Show warnings for deprecation and bad generics use
    options.compilerArgs << "-Xlint:deprecation"
    options.fork = true
    options.forkOptions.executable = 'javac'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) { exclude 'mcmod.info' }
}

jar {
    from(configurations.bundledLibs.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/**"
    }
}
